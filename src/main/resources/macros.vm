## Macro to fill common tags from pom
#macro(addHeader $mavenProject)
    <name>${mavenProject.artifactId}</name>
    #if( $mavenProject.name )<displayname>${mavenProject.name}</displayname>
    #end#if( $mavenProject.description )<description>${mavenProject.description}</description>
    #end#if( $mavenProject.organization && $mavenProject.organization.name )<vendor>${mavenProject.organization.name}</vendor>
    #end<version>${mavenProject.version}</version>
#end

## Macro to add transitive dependencies from pom
#macro(addResources $mavenProject $scope $libPath)
#foreach( $dependency in $mavenProject.getDependencyArtifacts() )
#if( ${dependency.scope} == "compile" || ${dependency.scope} == "runtime")
#set($depName="${dependency.artifactId}")
#set($depVersion="${dependency.version}")
#set($depFile = "${libPath}/${dependency.file.name}")
        <resource #if($scope != "")scope="${scope}"#end name="${depName}" version="${depVersion}">${depFile}</resource>
#end
#end
#end

## Macro to include all module xml fragments from neighbor maven modules
#macro(addModuleXmlFragments $mavenProject)
#foreach( $childModule in $project.getParent().getModules() )
    #set($importFile = "../../../../$childModule/target/module.xml")
    #include($importFile)
#end
#end

## Macro to render a standard module xml
#macro (defaultModuleXml $project)
<module>

    #addHeader($project)

    <components>

        #addModuleXmlFragments($project)

    </components>

</module>
#end