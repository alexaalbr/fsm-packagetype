## Macro to fill names from pom
#macro(addName $mavenProject)
    <name>${mavenProject.groupId}.${mavenProject.artifactId}</name>
    #if( $mavenProject.name )<displayname>${mavenProject.name}</displayname>
    #end
#end

## Macro to fill common tags from pom
#macro(addHeader $mavenProject)
#addName($mavenProject)#if( $mavenProject.description )<description>${mavenProject.description}</description>
    #end#if( $mavenProject.organization && $mavenProject.organization.name )<vendor>${mavenProject.organization.name}</vendor>
    #end<version>${mavenProject.version}</version>
#end

## Macro to add transitive dependencies from pom
#macro(addResources $mavenProject $scope $libPath)
#foreach( $dependency in $mavenProject.getArtifacts() )
#if( ${dependency.scope} == "compile" || ${dependency.scope} == "runtime")
    #addResource($dependency $scope $libPath)
#end
#end
#end

## Marco to add a resource
#macro(addResource $currentArtifact $scope $libPath)
#set($depName = "${currentArtifact.groupId}.${currentArtifact.artifactId}")
#set($depVersion = "${currentArtifact.version}")
#set($depFile = "${libPath}/${currentArtifact.file.name}")
#if($fsmode)
#set($depMode='mode="isolated"')
#else
#set($depMode="")
#end
<resource #if($fsmode && $fsmode != "")mode="${fsmode}" #end#if($scope != "")scope="${scope}"#end name="${depName}" version="${depVersion}">${depFile}</resource>
#set($depName = "")
#set($depVersion = "")
#set($depFile = "")
#set($depMode="")
#end

## Macro to include all module xml fragments from neighbor maven modules
#macro(addModuleXmlFragments $mavenProject)
#foreach( $childModule in $project.getParent().getModules() )
    #set($importFile = "../../../../$childModule/target/module-fragment.xml")
    #include($importFile)
#end
#end

## Macro to render a standard module xml
#macro (defaultModuleXml $project)
<module>

    #addHeader($project)

    <components>

        #addModuleXmlFragments($project)

    </components>

</module>
#end